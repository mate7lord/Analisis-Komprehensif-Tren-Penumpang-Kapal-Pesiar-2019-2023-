# -*- coding: utf-8 -*-
"""Comprehensive Analysis of Cruise Ship Passenger Trends (2019-2023).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSr9YI9XXoTKDXdqG6Us2LSMtV-RkIXI

# **Analisis Komprehensif Tren Penumpang Kapal Pesiar (2019-2023)**

## Deskripsi
Proyek ini bertujuan untuk menganalisis data penumpang kapal pesiar dari tahun 2019 hingga 2023 untuk memahami tren, pola perjalanan, dan segmentasi penumpang. Dengan analisis ini, perusahaan dapat membuat keputusan yang lebih baik terkait perencanaan operasional dan strategi pemasaran untuk meningkatkan retensi penumpang dan mengoptimalkan rute perjalanan.

## Tujuan

- Memahami distribusi dan tren jumlah penumpang kapal pesiar dari tahun 2019
hingga 2023.

- Mengidentifikasi rute kapal pesiar yang paling populer berdasarkan jumlah penumpang.

- Memprediksi jumlah penumpang menggunakan model regresi linear.

- Mengelompokkan penumpang berdasarkan karakteristik mereka menggunakan clustering K-Means.

- Memberikan rekomendasi bisnis berdasarkan hasil analisis dan pemodelan.

## Dataset

Dataset yang digunakan adalah data penumpang kapal pesiar dari lima pelabuhan utama, termasuk informasi tentang nama kapal, negara asal, tanggal keberangkatan, pelabuhan tujuan, jumlah penumpang, dan jumlah kru. Data ini mencakup berbagai fitur yang dapat digunakan untuk analisis dan pemodelan.

### Mengakses data dari google drive
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import gdown
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.cluster import KMeans

# URL Google Drive
url = 'https://drive.google.com/uc?id=1Pt9wAgu9F6JGXv6G4cz6Knl6Xt1DY2D0'

# Unduh file dari Google Drive
output = 'data-penumpang-5-pelabuhan-cruise_imigrasi_2019-2023.csv'
gdown.download(url, output, quiet=False)

# Memuat dataset
data = pd.read_csv(output)

# Menampilkan informasi dasar tentang dataset
data.info()

# Menampilkan beberapa baris pertama
print(data.head())

# Statistik deskriptif
print(data.describe())

"""#### Insight:

- Informasi Dataset: Dataset terdiri dari beberapa fitur penting seperti Nama Kapal Pesiar, Negara Asal, Tanggal Keberangkatan, Pelabuhan Tujuan, Jumlah Penumpang, dan Jumlah Kru. Informasi ini memberikan gambaran umum tentang data yang akan dianalisis.
- Tipe Data: Beberapa kolom memiliki tipe data yang perlu diperbaiki, seperti kolom yang seharusnya bertipe numerik tetapi saat ini bertipe objek karena mungkin ada tanda baca atau format penulisan yang tidak sesuai.
"""

# Load Dataset
file_path = "data-penumpang-5-pelabuhan-cruise_imigrasi_2019-2023.csv"
data = pd.read_csv(file_path)

"""## Preprocessing

Langkah-langkah pembersihan data meliputi mengatasi missing values, mengubah tipe data yang tidak sesuai, dan normalisasi fitur.
"""

# Menghapus koma dari kolom numerik dan mengonversi ke float
columns_to_convert = ['Jumlah Penumpang', 'Jml Penumpang WNA', 'Jml Penumpang WNI', 'Jml Crew WNA', 'Jml Crew WNI']

for column in columns_to_convert:
    data[column] = data[column].astype(str).str.replace(',', '').astype(float)
# Mengatasi missing values
data.fillna(0, inplace=True)
# Mengubah tipe data yang sesuai untuk kolom tanggal
data['Tanggal Keberangkatan'] = pd.to_datetime(data['Tanggal Keberangkatan'], format='%d %B %Y', errors='coerce')
data['Tanggal Kedatangan'] = pd.to_datetime(data['Tanggal Kedatangan'], format='%d %B %Y', errors='coerce')

"""#### Insight:

Mengatasi Missing Values dan Tipe Data yang Sesuai: Penting untuk memastikan data konsisten dan bebas dari missing values untuk analisis dan pemodelan yang akurat.

## Exploratory Data Analysis (EDA)

Analisis deskriptif dan visualisasi utama untuk memahami distribusi data dan menemukan pola penting.

### Visualisasi Distribusi Jumlah Penumpang
"""

# Visualisasi distribusi jumlah penumpang
plt.figure(figsize=(10, 6))
sns.histplot(data['Jumlah Penumpang'], bins=10, kde=True)
plt.title('Distribusi Jumlah Penumpang')
plt.xlabel('Jumlah Penumpang')
plt.ylabel('Frekuensi')
plt.grid(True)
plt.show()

# Boxplot untuk jumlah penumpang
plt.figure(figsize=(10, 6))
sns.boxplot(y=data['Jumlah Penumpang'])
plt.title('Boxplot Jumlah Penumpang')
plt.ylabel('Jumlah Penumpang')
plt.grid(True)
plt.show()

"""#### Insight:

Distribusi Jumlah Penumpang: Sebagian besar data terkonsentrasi pada jumlah penumpang yang lebih rendah, dengan outliers menunjukkan variasi signifikan.

### Visualisasi Tren Jumlah Penumpang Per Tahun
"""

# Mengubah tipe data yang sesuai
data['Tanggal Kedatangan'] = pd.to_datetime(data['Tanggal Kedatangan'], errors='coerce')
data['Tahun Kedatangan'] = data['Tanggal Kedatangan'].dt.year
penumpang_per_tahun = data.groupby('Tahun Kedatangan')['Jumlah Penumpang'].sum().reset_index()

# Visualisasi tren jumlah penumpang per tahun
plt.figure(figsize=(12, 6))
sns.lineplot(data=penumpang_per_tahun, x='Tahun Kedatangan', y='Jumlah Penumpang', marker='o', color='royalblue', linewidth=2.5)
plt.title('Tren Jumlah Penumpang Per Tahun', fontsize=16, fontweight='bold')
plt.xlabel('Tahun', fontsize=14)
plt.ylabel('Jumlah Penumpang')
plt.xticks(penumpang_per_tahun['Tahun Kedatangan'], rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

"""#### Insight:

Tren Jumlah Penumpang Per Tahun: Fluktuasi jumlah penumpang dari tahun ke tahun dapat memberikan wawasan tentang faktor-faktor eksternal yang mempengaruhi tren wisata.

## Modeling

Model yang digunakan untuk menganalisis dan memprediksi data penumpang meliputi regresi linear dan clustering dengan K-Means.

### Regresi Linear
"""

# Model Regresi Linear
X = data[['Jml Penumpang WNA', 'Jml Penumpang WNI', 'Jml Crew WNA', 'Jml Crew WNI']]
y = data['Jumlah Penumpang']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)

print(f'MAE: {mae}, RMSE: {rmse}')

"""#### Insight:

Regresi Linear: Model memberikan prediksi yang baik dengan MAE dan RMSE yang rendah, menunjukkan hubungan linear yang kuat antara fitur penjelas dan jumlah penumpang.

### Visualisasi Prediksi vs Aktual
"""

# Visualisasi prediksi vs aktual
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual', color='blue', marker='o')
plt.plot(y_pred, label='Predicted', color='red', linestyle='--', marker='x')
plt.title('Prediksi vs Aktual Jumlah Penumpang')
plt.xlabel('Samples')
plt.ylabel('Jumlah Penumpang')
plt.legend()
plt.grid(True)
plt.show()

"""#### Insight:

Prediksi vs Aktual: Grafik menunjukkan bahwa prediksi model cukup dekat dengan nilai aktual, mengindikasikan kinerja model yang baik.

### Clustering dengan K-Means
"""

# Memilih fitur untuk clustering
X = data[['Jml Penumpang WNA', 'Jml Penumpang WNI', 'Jml Crew WNA', 'Jml Crew WNI']]

# Clustering dengan K-Means
kmeans = KMeans(n_clusters=3, random_state=42)
data['Cluster'] = kmeans.fit_predict(X)

# Visualisasi clustering
plt.figure(figsize=(10, 6))
sns.scatterplot(x=data['Jml Penumpang WNA'], y=data['Jumlah Penumpang'], hue=data['Cluster'], palette='viridis')
plt.title('Segmentasi Penumpang berdasarkan Jumlah Penumpang WNA dan Total Jumlah Penumpang')
plt.xlabel('Jumlah Penumpang WNA')
plt.ylabel('Jumlah Penumpang')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

"""#### Insight:

Clustering: K-Means membantu mengidentifikasi segmen penumpang yang berbeda, memungkinkan strategi pemasaran yang lebih tertarget.

## Rute Kapal Pesiar Populer

Mengelompokkan data berdasarkan rute dan menghitung jumlah penumpang untuk setiap rute.
"""

# Mengelompokkan data berdasarkan rute dan menghitung jumlah penumpang untuk setiap rute
rute_populer = data.groupby('Rute Kapal Pesiar')['Jumlah Penumpang'].sum().reset_index()

# Mengurutkan data berdasarkan jumlah penumpang dari yang terbanyak
rute_populer = rute_populer.sort_values(by='Jumlah Penumpang', ascending=False)

# Visualisasi rute populer dengan jumlah penumpang terbanyak
plt.figure(figsize=(12, 8))
sns.barplot(data=rute_populer, x='Jumlah Penumpang', y='Rute Kapal Pesiar', palette='viridis')
plt.title('Rute Kapal Pesiar Populer Berdasarkan Jumlah Penumpang', fontsize=16, fontweight='bold')
plt.xlabel('Jumlah Penumpang', fontsize=14)
plt.ylabel('Rute Kapal Pesiar', fontsize=14)
plt.show()

"""#### Insight:

Rute Populer: Rute dari Singapura ke Benoa adalah yang paling populer, diikuti oleh rute dari Australia ke Benoa. Analisis ini menunjukkan rute-rute yang memiliki volume penumpang tertinggi dan memberikan wawasan penting untuk strategi pemasaran dan operasional.

## Kesimpulan :

- Regresi Linear: Model regresi linear memberikan prediksi yang baik dengan MAE dan RMSE yang rendah. Ini menunjukkan bahwa model ini dapat diandalkan untuk memprediksi jumlah penumpang berdasarkan fitur yang tersedia.

- Clustering dengan K-Means: Clustering dengan K-Means membantu mengidentifikasi segmentasi penumpang yang berbeda, yang dapat digunakan untuk menyusun strategi pemasaran yang lebih tepat sasaran. Setiap cluster menunjukkan segmen penumpang yang memiliki karakteristik serupa.

- Rute Populer: Rute dari Singapura ke Benoa adalah yang paling populer, diikuti oleh rute dari Australia ke Benoa. Informasi ini penting untuk merencanakan strategi pemasaran dan operasional yang lebih efektif.

## Rekomendasi Bisnis :

1. Fokus pada Rute Populer: Mengalokasikan lebih banyak sumber daya dan upaya pemasaran pada rute-rute populer seperti Singapura ke Benoa dan Australia ke Benoa untuk meningkatkan retensi penumpang. Rute-rute ini memiliki potensi tinggi untuk menarik lebih banyak penumpang.

2. Segmentasi Penumpang: Menggunakan hasil clustering untuk menyesuaikan penawaran layanan dan promosi sesuai dengan segmen penumpang yang berbeda. Setiap segmen memiliki kebutuhan dan preferensi yang unik, sehingga penawaran yang disesuaikan dapat meningkatkan kepuasan dan retensi penumpang.

3. Optimasi Kapasitas: Menggunakan prediksi jumlah penumpang untuk mengoptimalkan kapasitas kapal dan mengurangi biaya operasional. Dengan memprediksi jumlah penumpang yang akurat, perusahaan dapat menghindari kapasitas yang tidak optimal dan mengelola sumber daya dengan lebih efisien.
"""